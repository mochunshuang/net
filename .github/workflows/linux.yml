# This starter workflow is for a CMake project running on a single platform. There is a different starter workflow if you need cross-platform coverage.
# See: https://github.com/actions/st
name: linux_gcc_14

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

env:
  BUILD_TYPE: Release

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4 # 检出代码

      - name: Print working directory
        run: pwd

      - name: List files (for debugging)
        run: ls -R

      - name: Install g++-14
        run: |
          sudo apt-get update
          sudo apt-get install -y software-properties-common
          sudo add-apt-repository -y ppa:ubuntu-toolchain-r/test
          sudo apt-get update
          sudo apt-get install -y g++-14

      - name: Set g++-14 as default
        run: |
          sudo update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-14 100
          sudo update-alternatives --set g++ /usr/bin/g++-14

      - name: Install CMake 3.30 (from official binaries)
        run: |
          sudo apt-get update
          sudo apt-get install -y wget
          wget https://github.com/Kitware/CMake/releases/download/v3.30.0/cmake-3.30.0-linux-x86_64.tar.gz
          tar -xzf cmake-3.30.0-linux-x86_64.tar.gz
          sudo mv cmake-3.30.0-linux-x86_64 /opt/cmake-3.30.0
          sudo ln -sf /opt/cmake-3.30.0/bin/cmake /usr/bin/cmake

      - name: Install Ninja (Latest Version)
        run: |
          sudo apt-get update
          sudo apt-get install -y ninja-build

      - name: Configure CMake (with Ninja)
        run: cmake -B build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -G Ninja -S .

      - name: Get number of logical cores
        id: get_cores
        run: echo "CORES=$(nproc)" >> $GITHUB_ENV

      - name: Build (with parallel)
        run: |
          cmake --build ./build --config ${{env.BUILD_TYPE}} --parallel ${{env.CORES}}

      - name: Test (with parallel)
        working-directory: ./build
        env:
          CTEST_PARALLEL_LEVEL: ${{env.CORES}}
        run: |
          ctest -C ${{env.BUILD_TYPE}} --output-on-failure --verbose
